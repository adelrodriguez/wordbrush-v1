// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(nanoid())
  email String @unique

  password Password?
  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum IntendedUse {
  Personal
  Blog
  Newsletter
  SocialMedia
  BookCover
  BookInterior
  PodcastCover
  PodcastEpisode
  Other
}

enum AspectRatio {
  Square
  Portrait
  Landscape
}

enum ProjectStatus {
  Draft // Default, the project is being worked on and has no images generated
  Submitted // The project has at least one image generated
  Removed // The project has been removed by the user and is no longer visible
}

model Project {
  id String @id @default(nanoid())

  name        String
  intendedUse IntendedUse

  status ProjectStatus @default(Draft)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  templates Template[]

  images Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id String @id @default(nanoid())

  artStyle   ArtStyle? @relation(fields: [artStyleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  artStyleId String?

  aspectRatio AspectRatio?
  detail      Int?
  exclude     String?
  keyElements String?
  mood        String?

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  images Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StorageService {
  R2
}

model Image {
  id String @id @default(nanoid())

  service StorageService
  bucket  String
  url     String?        @unique // The URL of the image in the storage service

  publicUrl String? @unique // The public URL of the image

  prompt String? // The prompt used to generate the image

  jobId String? // The ID of the job that generated the image

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  template   Template @relation(fields: [templateId], references: [id])
  templateId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Category {
  Abstract
  Digital
  Fantasy
  Geometric
  Historical
  Illustrative
  Modern
  Nature
  SciFi
  Technological
  Traditional
}

model ArtStyle {
  id String @id @default(nanoid())

  name        String  @unique
  description String?
  prompt      String

  keywords String[]
  category Category?

  exampleUrl String?

  templates Template[]

  updatedAt DateTime @updatedAt
}
