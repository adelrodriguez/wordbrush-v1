// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(nanoid())
  email String @unique

  isVerified  Boolean   @default(false)
  lastLoginAt DateTime?

  projects     Project[]
  subscription Subscription?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Totp {
  hash String @unique

  active Boolean @default(false)

  attempts Int @default(0)

  expiresAt DateTime

  @@index([expiresAt])
}

enum IntendedUse {
  PersonalBlog
  CompanyBlog
  Newsletter
  SocialMedia
  BookCover
  BookInterior
  PodcastCover
  PodcastEpisode
  Other
}

enum AspectRatio {
  Square
  Portrait
  Landscape
}

enum ProjectStatus {
  Draft // Default, the project is being worked on and has no images generated
  Submitted // The project has at least one image generated
  Removed // The project has been removed by the user and is no longer visible
}

model Project {
  id String @id @default(nanoid())

  name        String
  intendedUse IntendedUse

  status ProjectStatus @default(Draft)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  templates Template[]

  images Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id String @id @default(nanoid())

  artStyle   ArtStyle? @relation(fields: [artStyleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  artStyleId String?

  aspectRatio AspectRatio?
  detail      Int?
  exclude     String?
  keyElements String?
  mood        String?

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  images Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StorageService {
  R2
}

model Image {
  id String @id @default(nanoid())

  service StorageService
  bucket  String
  url     String?        @unique // The URL of the image in the storage service

  publicUrl String? @unique // The public URL of the image

  prompt String? // The prompt used to generate the image

  jobId String? // The ID of the job that generated the image

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  template   Template @relation(fields: [templateId], references: [id])
  templateId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Category {
  Abstract
  Digital
  Fantasy
  Geometric
  Historical
  Illustrative
  Modern
  Nature
  SciFi
  Technological
  Traditional
}

model ArtStyle {
  id String @id @default(nanoid())

  name        String  @unique
  description String?
  prompt      String

  keywords String[]
  category Category?

  exampleUrl String?

  show Boolean @default(true) // Whether the art style should be shown to users

  templates Template[]

  updatedAt DateTime @updatedAt
}

enum Plan {
  Trial
  Personal
  Professional
  Publisher
}

enum SubscriptionProvider {
  LemonSqueezy
}

model Subscription {
  id        String   @id @default(nanoid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  plan Plan

  externalId         String? @unique
  externalCustomerId String? @unique

  provider SubscriptionProvider?

  creditBalance Int @default(0)

  creditTransactions CreditTransaction[]

  @@index([externalId, userId])
}

model CreditTransaction {
  id String @id @default(nanoid())

  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscriptionId String

  amount  Int // Positive for adding credits, negative for using credits
  balance Int // Current balance after the transaction

  reason String? // Reason for the transaction

  productId String? // The product that was purchased with the credits
  product   Product? @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Webhook {
  id        String   @id @default(nanoid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  service   WebhookService
  webhookId String

  event String

  payload Json? @db.Json
}

enum WebhookService {
  LemonSqueezy
}

model Product {
  id String @id @default(nanoid())

  name        String
  description String?
  price       Int

  creditAmount Int

  externalId  String? @unique
  checkoutUrl String?

  creditTransactions CreditTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
